/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignatureRequestEvent model module.
 * @module model/SignatureRequestEvent
 * @version 1.12.0
 */
class SignatureRequestEvent {
    /**
     * Constructs a new <code>SignatureRequestEvent</code>.
     * @alias module:model/SignatureRequestEvent
     * @param signeeId {String} Secret identifier of the signer (provided by email).
     * @param type {module:model/SignatureRequestEvent.TypeEnum} Type of the event to report: - DATA_VERIFIED: the signer verified the integrity (ie. hash) of the data to sign - DATA_REVIEWED: the signer reviewed and acceted the data to sign - TCU_ACCEPTED: the signer reviewed and accepted the TCU - TCU_REFUSED: the signer refused the TCU - SIGN_ACCEPTED: the signer accepted to sign the data - SIGN_REFUSED: the signer refused to sign the data 
     */
    constructor(signeeId, type) { 
        
        SignatureRequestEvent.initialize(this, signeeId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, signeeId, type) { 
        obj['signeeId'] = signeeId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SignatureRequestEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignatureRequestEvent} obj Optional instance to populate.
     * @return {module:model/SignatureRequestEvent} The populated <code>SignatureRequestEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignatureRequestEvent();

            if (data.hasOwnProperty('signeeId')) {
                obj['signeeId'] = ApiClient.convertToType(data['signeeId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Secret identifier of the signer (provided by email).
 * @member {String} signeeId
 */
SignatureRequestEvent.prototype['signeeId'] = undefined;

/**
 * Type of the event to report: - DATA_VERIFIED: the signer verified the integrity (ie. hash) of the data to sign - DATA_REVIEWED: the signer reviewed and acceted the data to sign - TCU_ACCEPTED: the signer reviewed and accepted the TCU - TCU_REFUSED: the signer refused the TCU - SIGN_ACCEPTED: the signer accepted to sign the data - SIGN_REFUSED: the signer refused to sign the data 
 * @member {module:model/SignatureRequestEvent.TypeEnum} type
 */
SignatureRequestEvent.prototype['type'] = undefined;

/**
 * Comment related to the event to report.
 * @member {String} comment
 */
SignatureRequestEvent.prototype['comment'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SignatureRequestEvent['TypeEnum'] = {

    /**
     * value: "DATA_VERIFIED"
     * @const
     */
    "DATA_VERIFIED": "DATA_VERIFIED",

    /**
     * value: "DATA_REVIEWED"
     * @const
     */
    "DATA_REVIEWED": "DATA_REVIEWED",

    /**
     * value: "TCU_ACCEPTED"
     * @const
     */
    "TCU_ACCEPTED": "TCU_ACCEPTED",

    /**
     * value: "TCU_REFUSED"
     * @const
     */
    "TCU_REFUSED": "TCU_REFUSED",

    /**
     * value: "SIGN_ACCEPTED"
     * @const
     */
    "SIGN_ACCEPTED": "SIGN_ACCEPTED",

    /**
     * value: "SIGN_REFUSED"
     * @const
     */
    "SIGN_REFUSED": "SIGN_REFUSED"
};



export default SignatureRequestEvent;

