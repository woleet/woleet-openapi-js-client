/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Key model module.
 * @module model/Key
 * @version 1.12.0
 */
class Key {
    /**
     * Constructs a new <code>Key</code>.
     * Key information.
     * @alias module:model/Key
     */
    constructor() { 
        
        Key.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Key} obj Optional instance to populate.
     * @return {module:model/Key} The populated <code>Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Key();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pubKey')) {
                obj['pubKey'] = ApiClient.convertToType(data['pubKey'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Number');
            }
            if (data.hasOwnProperty('revokedAt')) {
                obj['revokedAt'] = ApiClient.convertToType(data['revokedAt'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Key name.
 * @member {String} name
 */
Key.prototype['name'] = undefined;

/**
 * Public key (bitcoin address when using BIP39 keys).
 * @member {String} pubKey
 */
Key.prototype['pubKey'] = undefined;

/**
 * Key status: - `valid`: the key is valid and can be used to sign - `expired`: the key expired at `expiration` - `revoked`: the key was revoked at `revokedAt` 
 * @member {module:model/Key.StatusEnum} status
 */
Key.prototype['status'] = undefined;

/**
 * Key expiration date (Unix ms timestamp). <br>Note that this property is not returned if the key has no expiration date. 
 * @member {Number} expiration
 */
Key.prototype['expiration'] = undefined;

/**
 * Key revocation date (Unix ms timestamp). <br>Note that this property is not returned if the key is not yet revoked. 
 * @member {Number} revokedAt
 */
Key.prototype['revokedAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Key['StatusEnum'] = {

    /**
     * value: "valid"
     * @const
     */
    "valid": "valid",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "revoked"
     * @const
     */
    "revoked": "revoked"
};



export default Key;

