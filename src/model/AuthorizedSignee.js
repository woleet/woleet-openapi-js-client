/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthorizedSignee model module.
 * @module model/AuthorizedSignee
 * @version 1.6.2
 */
class AuthorizedSignee {
    /**
     * Constructs a new <code>AuthorizedSignee</code>.
     * @alias module:model/AuthorizedSignee
     */
    constructor() { 
        
        AuthorizedSignee.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthorizedSignee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthorizedSignee} obj Optional instance to populate.
     * @return {module:model/AuthorizedSignee} The populated <code>AuthorizedSignee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthorizedSignee();

            if (data.hasOwnProperty('pubKey')) {
                obj['pubKey'] = ApiClient.convertToType(data['pubKey'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('countryCallingCode')) {
                obj['countryCallingCode'] = ApiClient.convertToType(data['countryCallingCode'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('requiresOTP')) {
                obj['requiresOTP'] = ApiClient.convertToType(data['requiresOTP'], 'Boolean');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('identityURL')) {
                obj['identityURL'] = ApiClient.convertToType(data['identityURL'], 'String');
            }
            if (data.hasOwnProperty('anchorId')) {
                obj['anchorId'] = ApiClient.convertToType(data['anchorId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The public key the authorized signee must use to sign.<br> **Currently only Bitcoin addresses are supported.**<br> If not set, the authorized signee can sign using any key. 
 * @member {String} pubKey
 */
AuthorizedSignee.prototype['pubKey'] = undefined;

/**
 * The type of device the authorized signee should use to sign:<br> - SERVER: Woleet.ID Server or equivalent - MOBILE: Woleet.ID Mobile or equivalent - NANO: Ledger Nano S or equivalent If set, the signature web application could only offer the corresponding signature mode. 
 * @member {module:model/AuthorizedSignee.DeviceEnum} device
 */
AuthorizedSignee.prototype['device'] = undefined;

/**
 * The email of the authorized signee.<br> If set, an email is sent by the platform to the authorized signee, and `commonName` must also be set.<br> If set, `pubKey` is not mandatory, to allow the authorized signee to sign using any key. 
 * @member {String} email
 */
AuthorizedSignee.prototype['email'] = undefined;

/**
 * The country calling code of the authorized signee. 
 * @member {String} countryCallingCode
 */
AuthorizedSignee.prototype['countryCallingCode'] = undefined;

/**
 * The phone of the authorized signee (not including the country calling code).<br> This phone must be able to receive an OTP by SMS. 
 * @member {String} phone
 */
AuthorizedSignee.prototype['phone'] = undefined;

/**
 * `true` if the signee must provide an OTP to sign.<br> If `true`, `phone` must be set, since the OTP is sent by SMS. 
 * @member {Boolean} requiresOTP
 */
AuthorizedSignee.prototype['requiresOTP'] = undefined;

/**
 * The full name of the authorized signee. 
 * @member {String} commonName
 */
AuthorizedSignee.prototype['commonName'] = undefined;

/**
 * Web hook to use to verify the signee's identity.<br> If set, it is used to verify signee's identity at signature registration time. 
 * @member {String} identityURL
 */
AuthorizedSignee.prototype['identityURL'] = undefined;

/**
 * If the authorized signee has signed, identifier of the signature anchor created. 
 * @member {String} anchorId
 */
AuthorizedSignee.prototype['anchorId'] = undefined;





/**
 * Allowed values for the <code>device</code> property.
 * @enum {String}
 * @readonly
 */
AuthorizedSignee['DeviceEnum'] = {

    /**
     * value: "SERVER"
     * @const
     */
    "SERVER": "SERVER",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "NANO"
     * @const
     */
    "NANO": "NANO"
};



export default AuthorizedSignee;

