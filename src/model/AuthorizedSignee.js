/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthorizedSignee model module.
 * @module model/AuthorizedSignee
 * @version 1.8.0
 */
class AuthorizedSignee {
    /**
     * Constructs a new <code>AuthorizedSignee</code>.
     * @alias module:model/AuthorizedSignee
     */
    constructor() { 
        
        AuthorizedSignee.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthorizedSignee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthorizedSignee} obj Optional instance to populate.
     * @return {module:model/AuthorizedSignee} The populated <code>AuthorizedSignee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthorizedSignee();

            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('countryCallingCode')) {
                obj['countryCallingCode'] = ApiClient.convertToType(data['countryCallingCode'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('requiresOTP')) {
                obj['requiresOTP'] = ApiClient.convertToType(data['requiresOTP'], 'Boolean');
            }
            if (data.hasOwnProperty('signsFaceToFace')) {
                obj['signsFaceToFace'] = ApiClient.convertToType(data['signsFaceToFace'], 'Boolean');
            }
            if (data.hasOwnProperty('vars')) {
                obj['vars'] = ApiClient.convertToType(data['vars'], Object);
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('pubKey')) {
                obj['pubKey'] = ApiClient.convertToType(data['pubKey'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('identityURL')) {
                obj['identityURL'] = ApiClient.convertToType(data['identityURL'], 'String');
            }
            if (data.hasOwnProperty('feedbackSubject')) {
                obj['feedbackSubject'] = ApiClient.convertToType(data['feedbackSubject'], 'String');
            }
            if (data.hasOwnProperty('feedbackMessage')) {
                obj['feedbackMessage'] = ApiClient.convertToType(data['feedbackMessage'], 'String');
            }
            if (data.hasOwnProperty('anchorId')) {
                obj['anchorId'] = ApiClient.convertToType(data['anchorId'], 'String');
            }
            if (data.hasOwnProperty('signedOn')) {
                obj['signedOn'] = ApiClient.convertToType(data['signedOn'], 'Number');
            }
            if (data.hasOwnProperty('auditTrailId')) {
                obj['auditTrailId'] = ApiClient.convertToType(data['auditTrailId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('OTP')) {
                obj['OTP'] = ApiClient.convertToType(data['OTP'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The full name of the signer.
 * @member {String} commonName
 */
AuthorizedSignee.prototype['commonName'] = undefined;

/**
 * The email of the signer.<br> Two signers cannot have the same email.<br> If set, `commonName` must also be set. 
 * @member {String} email
 */
AuthorizedSignee.prototype['email'] = undefined;

/**
 * The country calling code of the signer (numbers only, no white space). 
 * @member {String} countryCallingCode
 */
AuthorizedSignee.prototype['countryCallingCode'] = undefined;

/**
 * The phone number of the signer (not including the country calling code, numbers only, no white spaces).<br> Two signers cannot have the same phone number.<br> If set, `commonName` must also be set.<br> This phone number must support SMS delivery. 
 * @member {String} phone
 */
AuthorizedSignee.prototype['phone'] = undefined;

/**
 * `true` if the signer must provide an OTP to sign.<br> If `true`, `phone` must be set, since the OTP is sent by SMS. 
 * @member {Boolean} requiresOTP
 */
AuthorizedSignee.prototype['requiresOTP'] = undefined;

/**
 * `true` if the signer must sign face-to-face, or `false` (or unset) if the signer must sign using the regular signature workflow.<br> If `true`, `requiresOTP` must also be `true`. 
 * @member {Boolean} signsFaceToFace
 */
AuthorizedSignee.prototype['signsFaceToFace'] = undefined;

/**
 * A set of variables (key/value pairs) that can be used to customize the signature request workflow for this signer.<br> Values must be of type null, boolean, string or number: nested JSON objects are not allowed.<br> Variables defined here overwrites the ones defined at signature request level when emailing the signer.<br> **This property is only available to the owner and the signers of the signature request.** 
 * @member {Object} vars
 */
AuthorizedSignee.prototype['vars'] = undefined;

/**
 * The preferred language (provided as an ISO 639-1 string) to use when emailing the signer.<br> If set, this property overwrites the `lang` property defined at signature request level. 
 * @member {String} lang
 */
AuthorizedSignee.prototype['lang'] = undefined;

/**
 * The public key the signer must use to sign.<br> If not set, the signer can use any key to sign.<br> **Currently only Bitcoin addresses are supported.** 
 * @member {String} pubKey
 */
AuthorizedSignee.prototype['pubKey'] = undefined;

/**
 * The type of device the signer should use to sign:<br> - SERVER: Woleet.ID Server or equivalent<br> - MOBILE: Woleet.ID Mobile or equivalent<br> - NANO: Ledger Nano S or equivalent<br> If set, the signature application can use it to propose only the corresponding signature mode. 
 * @member {module:model/AuthorizedSignee.DeviceEnum} device
 */
AuthorizedSignee.prototype['device'] = undefined;

/**
 * Web hook to use to verify the signer's identity.<br> If set, this property overwrites the `identityURL` property defined at signature request level. 
 * @member {String} identityURL
 */
AuthorizedSignee.prototype['identityURL'] = undefined;

/**
 * Last feedback subject reported by the signer to the owner of the signature request.<br> **This property is only available to the owner of the signature request.** 
 * @member {String} feedbackSubject
 */
AuthorizedSignee.prototype['feedbackSubject'] = undefined;

/**
 * Last feedback message reported by the signer to the owner of the signature request.<br> **This property is only available to the owner of the signature request.** 
 * @member {String} feedbackMessage
 */
AuthorizedSignee.prototype['feedbackMessage'] = undefined;

/**
 * If the signer has signed, identifier of the signature anchor created.
 * @member {String} anchorId
 */
AuthorizedSignee.prototype['anchorId'] = undefined;

/**
 * If the signer has signed, date of signature (in milliseconds since Unix epoch).
 * @member {Number} signedOn
 */
AuthorizedSignee.prototype['signedOn'] = undefined;

/**
 * Identifier of the signer in the audit trail.
 * @member {String} auditTrailId
 */
AuthorizedSignee.prototype['auditTrailId'] = undefined;

/**
 * **WARNING: Do not use (test purpose only).** 
 * @member {String} id
 */
AuthorizedSignee.prototype['id'] = undefined;

/**
 * **WARNING: Do not use (test purpose only).** 
 * @member {String} OTP
 */
AuthorizedSignee.prototype['OTP'] = undefined;





/**
 * Allowed values for the <code>device</code> property.
 * @enum {String}
 * @readonly
 */
AuthorizedSignee['DeviceEnum'] = {

    /**
     * value: "SERVER"
     * @const
     */
    "SERVER": "SERVER",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "NANO"
     * @const
     */
    "NANO": "NANO"
};



export default AuthorizedSignee;

