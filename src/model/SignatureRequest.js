/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/v1.5.1/reference)** before reading this documentation. 
 *
 * OpenAPI spec version: 1.5.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Anchor', 'model/AuthorizedSignee'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Anchor'), require('./AuthorizedSignee'));
  } else {
    // Browser globals (root is window)
    if (!root.WoleetApi) {
      root.WoleetApi = {};
    }
    root.WoleetApi.SignatureRequest = factory(root.WoleetApi.ApiClient, root.WoleetApi.Anchor, root.WoleetApi.AuthorizedSignee);
  }
}(this, function(ApiClient, Anchor, AuthorizedSignee) {
  'use strict';




  /**
   * The SignatureRequest model module.
   * @module model/SignatureRequest
   * @version 1.5.1
   */

  /**
   * Constructs a new <code>SignatureRequest</code>.
   * @alias module:model/SignatureRequest
   * @class
   * @param name {String} Name of the signature request (doesn't need to be unique). 
   * @param hashToSign {String} SHA256 hash (ie. the fingerprint) of the original data to sign. 
   */
  var exports = function(name, hashToSign) {
    var _this = this;




    _this['name'] = name;

    _this['hashToSign'] = hashToSign;




  };

  /**
   * Constructs a <code>SignatureRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SignatureRequest} obj Optional instance to populate.
   * @return {module:model/SignatureRequest} The populated <code>SignatureRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('created')) {
        obj['created'] = ApiClient.convertToType(data['created'], 'Number');
      }
      if (data.hasOwnProperty('lastModified')) {
        obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('suspended')) {
        obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
      }
      if (data.hasOwnProperty('hashToSign')) {
        obj['hashToSign'] = ApiClient.convertToType(data['hashToSign'], 'String');
      }
      if (data.hasOwnProperty('anchors')) {
        obj['anchors'] = ApiClient.convertToType(data['anchors'], [Anchor]);
      }
      if (data.hasOwnProperty('deadline')) {
        obj['deadline'] = ApiClient.convertToType(data['deadline'], 'Number');
      }
      if (data.hasOwnProperty('maxSignatures')) {
        obj['maxSignatures'] = ApiClient.convertToType(data['maxSignatures'], 'Number');
      }
      if (data.hasOwnProperty('authorizedSignees')) {
        obj['authorizedSignees'] = ApiClient.convertToType(data['authorizedSignees'], [AuthorizedSignee]);
      }
    }
    return obj;
  }

  /**
   * Signature request identifier. It is allocated by the platform, and so must not be provided at creation time. 
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Date of creation (in milliseconds since Unix epoch). 
   * @member {Number} created
   */
  exports.prototype['created'] = undefined;
  /**
   * Date of last modification (in milliseconds since Unix epoch). 
   * @member {Number} lastModified
   */
  exports.prototype['lastModified'] = undefined;
  /**
   * Name of the signature request (doesn't need to be unique). 
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * `true` if the signature request is suspended, or `false` (or unset) if not.<br> When suspended, no more signature can be registered before the request is resumed. 
   * @member {Boolean} suspended
   */
  exports.prototype['suspended'] = undefined;
  /**
   * SHA256 hash (ie. the fingerprint) of the original data to sign. 
   * @member {String} hashToSign
   */
  exports.prototype['hashToSign'] = undefined;
  /**
   * List of signature anchors created for this signature request.<br> This property is only available to the owner of the signature request. 
   * @member {Array.<module:model/Anchor>} anchors
   */
  exports.prototype['anchors'] = undefined;
  /**
   * Deadline of the signature request (in milliseconds since Unix epoch).<br> When not set, null or 0, no deadline is applied.<br> If set, signatures registered after the deadline are refused. 
   * @member {Number} deadline
   */
  exports.prototype['deadline'] = undefined;
  /**
   * Maximum number of signatures to accept for this signature request.<br> When not set, null or 0, no maximum is applied.<br> If set, signatures coming from signees not in this list are refused.<br> This property and the `authorizedSignees` property are mutually exclusive.<br> This property is only available to the owner of the signature request. 
   * @member {Number} maxSignatures
   */
  exports.prototype['maxSignatures'] = undefined;
  /**
   * List of public keys of all signees authorized to register their signature for this signature request (no duplicate is authorized).<br> **Currently only Bitcoin addresses are supported.**<br> When not set or null, anybody can sign the signature request.<br> If set, signatures from public keys not in this list are rejected.<br> This property and the `maxSignatures` property are mutually exclusive.<br> This property is only available to the owner of the signature request. 
   * @member {Array.<module:model/AuthorizedSignee>} authorizedSignees
   */
  exports.prototype['authorizedSignees'] = undefined;



  return exports;
}));


