/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimestampVerificationStatus model module.
 * @module model/TimestampVerificationStatus
 * @version 1.13.0
 */
class TimestampVerificationStatus {
    /**
     * Constructs a new <code>TimestampVerificationStatus</code>.
     * @alias module:model/TimestampVerificationStatus
     */
    constructor() { 
        
        TimestampVerificationStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimestampVerificationStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimestampVerificationStatus} obj Optional instance to populate.
     * @return {module:model/TimestampVerificationStatus} The populated <code>TimestampVerificationStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimestampVerificationStatus();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('confirmations')) {
                obj['confirmations'] = ApiClient.convertToType(data['confirmations'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Timestamp verification status code: - VERIFIED: success: the proof receipt is verified<br> The receipt format is valid, the transaction is present in the Bitcoin blockchain and confirmed at least once, the receipt contains a valid Merkle proof linking its `targetHash` property to the transaction's `OP_RETURN` field.<br> The creation time and the number of confirmation of the block containing the transaction is returned in the `timestamp` and `confirmations` properties.<br> Any data whose SHA256 hash matches the proof receipt's `targetHash` is proven to exist at that time and has not been modified since.<br> - TX_NOT_SENT: warning: the transaction has not yet been sent to the blockchain (ie. the data or the signature has not yet been anchored) - TX_NOT_CONFIRMED: warning: the transaction is not yet confirmed by the blockchain (ie. not yet included in a block) - TX_NOT_FOUND: error: the receipt's `anchors` property does not include a valid Bitcoin transaction - INVALID_PROOF: error: the receipt's `proof` property is not a valid Merkle proof - TX_MISMATCH_RECEIPT: error: the receipt's `merkleRoot` property does not match the transaction's `OP_RETURN` field 
 * @member {module:model/TimestampVerificationStatus.CodeEnum} code
 */
TimestampVerificationStatus.prototype['code'] = undefined;

/**
 * Timestamp verification status text giving more insight about verification errors.
 * @member {String} text
 */
TimestampVerificationStatus.prototype['text'] = undefined;

/**
 * Proven timestamp of the data (for a data anchor) or of the signature (for a signature anchor).<br> This is the time of the Bitcoin block into which the anchoring process occurred (in milliseconds since Unix epoch). 
 * @member {Number} timestamp
 */
TimestampVerificationStatus.prototype['timestamp'] = undefined;

/**
 * Number of confirmations of the Bitcoin block into which the anchoring process occurred.
 * @member {Number} confirmations
 */
TimestampVerificationStatus.prototype['confirmations'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
TimestampVerificationStatus['CodeEnum'] = {

    /**
     * value: "VERIFIED"
     * @const
     */
    "VERIFIED": "VERIFIED",

    /**
     * value: "TX_NOT_SENT"
     * @const
     */
    "TX_NOT_SENT": "TX_NOT_SENT",

    /**
     * value: "TX_NOT_CONFIRMED"
     * @const
     */
    "TX_NOT_CONFIRMED": "TX_NOT_CONFIRMED",

    /**
     * value: "INVALID_PROOF"
     * @const
     */
    "INVALID_PROOF": "INVALID_PROOF",

    /**
     * value: "TX_NOT_FOUND"
     * @const
     */
    "TX_NOT_FOUND": "TX_NOT_FOUND",

    /**
     * value: "TX_MISMATCH_RECEIPT"
     * @const
     */
    "TX_MISMATCH_RECEIPT": "TX_MISMATCH_RECEIPT"
};



export default TimestampVerificationStatus;

