/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Info from './Info';

/**
 * The User model module.
 * @module model/User
 * @version 1.8.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     * @param email {String} Email of the user.
     * @param password {String} Password of the user (it must be provided at creation time).
     * @param roles {Array.<module:model/User.RolesEnum>} Array of user roles.
     * @param info {module:model/Info} 
     * @param status {module:model/User.StatusEnum} The status of the user:<br> - PENDING: the user email need to be validated<br> - APPROVED: the user can loging<br> - DISABLED: the user cannot login 
     */
    constructor(email, password, roles, info, status) { 
        
        User.initialize(this, email, password, roles, info, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, password, roles, info, status) { 
        obj['email'] = email;
        obj['password'] = password;
        obj['roles'] = roles;
        obj['info'] = info;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = Info.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }


}

/**
 * User identifier. It is allocated by the platform, and so must not be provided at creation time.
 * @member {String} id
 */
User.prototype['id'] = undefined;

/**
 * Date of creation (in milliseconds since Unix epoch).
 * @member {Number} created
 */
User.prototype['created'] = undefined;

/**
 * Date of last modification (in milliseconds since Unix epoch).
 * @member {Number} lastModified
 */
User.prototype['lastModified'] = undefined;

/**
 * Email of the user.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Password of the user (it must be provided at creation time).
 * @member {String} password
 */
User.prototype['password'] = undefined;

/**
 * Array of user roles.
 * @member {Array.<module:model/User.RolesEnum>} roles
 */
User.prototype['roles'] = undefined;

/**
 * @member {module:model/Info} info
 */
User.prototype['info'] = undefined;

/**
 * The status of the user:<br> - PENDING: the user email need to be validated<br> - APPROVED: the user can loging<br> - DISABLED: the user cannot login 
 * @member {module:model/User.StatusEnum} status
 * @default 'PENDING'
 */
User.prototype['status'] = 'PENDING';





/**
 * Allowed values for the <code>roles</code> property.
 * @enum {String}
 * @readonly
 */
User['RolesEnum'] = {

    /**
     * value: "ROLE_USER"
     * @const
     */
    "USER": "ROLE_USER",

    /**
     * value: "ROLE_DOMAIN_ADMIN"
     * @const
     */
    "DOMAIN_ADMIN": "ROLE_DOMAIN_ADMIN"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
User['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default User;

