/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReceiptSignature model module.
 * @module model/ReceiptSignature
 * @version 1.12.0
 */
class ReceiptSignature {
    /**
     * Constructs a new <code>ReceiptSignature</code>.
     * Proof of signature (only for proof of seal/signature receipts).
     * @alias module:model/ReceiptSignature
     */
    constructor() { 
        
        ReceiptSignature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReceiptSignature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiptSignature} obj Optional instance to populate.
     * @return {module:model/ReceiptSignature} The populated <code>ReceiptSignature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiptSignature();

            if (data.hasOwnProperty('signedHash')) {
                obj['signedHash'] = ApiClient.convertToType(data['signedHash'], 'String');
            }
            if (data.hasOwnProperty('signedIdentity')) {
                obj['signedIdentity'] = ApiClient.convertToType(data['signedIdentity'], 'String');
            }
            if (data.hasOwnProperty('signedIssuerDomain')) {
                obj['signedIssuerDomain'] = ApiClient.convertToType(data['signedIssuerDomain'], 'String');
            }
            if (data.hasOwnProperty('pubKey')) {
                obj['pubKey'] = ApiClient.convertToType(data['pubKey'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('identityURL')) {
                obj['identityURL'] = ApiClient.convertToType(data['identityURL'], 'String');
            }
            if (data.hasOwnProperty('signatureRequestURL')) {
                obj['signatureRequestURL'] = ApiClient.convertToType(data['signatureRequestURL'], 'String');
            }
        }
        return obj;
    }


}

/**
 * SHA256 hash of the signed data.
 * @member {String} signedHash
 */
ReceiptSignature.prototype['signedHash'] = undefined;

/**
 * X500 Distinguished Name representing the signed identity.
 * @member {String} signedIdentity
 */
ReceiptSignature.prototype['signedIdentity'] = undefined;

/**
 * Domain name of the identity server.
 * @member {String} signedIssuerDomain
 */
ReceiptSignature.prototype['signedIssuerDomain'] = undefined;

/**
 * Public key of the signer.<br> **Currently only Bitcoin addresses are supported.** 
 * @member {String} pubKey
 */
ReceiptSignature.prototype['pubKey'] = undefined;

/**
 * Signature of the `signedHash` property using the public key `pubKey`, or, if any of `signedIdentity` or `signedIssuerDomain` is provided, signature of SHA256(`signedHash` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`. 
 * @member {String} signature
 */
ReceiptSignature.prototype['signature'] = undefined;

/**
 * Web hook of the identity server to use to verify the signer's identity. 
 * @member {String} identityURL
 */
ReceiptSignature.prototype['identityURL'] = undefined;

/**
 * URL of the signature request.<br> **This property is only set for proof of signature receipts.** 
 * @member {String} signatureRequestURL
 */
ReceiptSignature.prototype['signatureRequestURL'] = undefined;






export default ReceiptSignature;

