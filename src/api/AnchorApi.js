/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.11.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Anchor from '../model/Anchor';
import AnchorIds from '../model/AnchorIds';
import Anchors from '../model/Anchors';

/**
* Anchor service.
* @module api/AnchorApi
* @version 1.11.1
*/
export default class AnchorApi {

    /**
    * Constructs a new AnchorApi. 
    * @alias module:api/AnchorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAnchor operation.
     * @callback module:api/AnchorApi~createAnchorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new anchor.
     * Use this operation to create a new anchor of one of these two types:<br> - a data anchor (generating a proof of existence receipt) allows to prove the existence of some data at some point in time.<br> - a signature anchor (generating a proof of signature receipt) allows to prove the existence of the signature of some data at some point in time, the validity of the signature and the signer's identity.<br> The properties `id`, `created`, `lastModified`, `status`, `timestamp` and `confirmations` are read-only and so must not be provided: they are managed by the platform and added to the returned anchor.<br> For data anchors, only the properties `name` and `hash` are required: the `hash` property must be the SHA256 hash of the data to anchor, and must be computed caller side. This allows not to leak the original data.<br> For signature anchors, only the properties `name`, `signedHash`, `signature` and `pubKey` are required (though the `identityURL` property is highly recommended).<br> Be sure to have at least 1 anchoring credit on your account. 
     * @param {module:model/Anchor} anchor Anchor object to create.
     * @param {module:api/AnchorApi~createAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchor}
     */
    createAnchor(anchor, callback) {
      let postBody = anchor;
      // verify the required parameter 'anchor' is set
      if (anchor === undefined || anchor === null) {
        throw new Error("Missing the required parameter 'anchor' when calling createAnchor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Anchor;
      return this.apiClient.callApi(
        '/anchor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnchor operation.
     * @callback module:api/AnchorApi~deleteAnchorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an anchor.
     * Use this operation to delete an anchor.<br> **WARNING: You should never delete an anchor, otherwise you will no longer be able to download its proof receipt.<br> Use this for test purpose only.** 
     * @param {String} anchorId Identifier of the anchor to delete.
     * @param {module:api/AnchorApi~deleteAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAnchor(anchorId, callback) {
      let postBody = null;
      // verify the required parameter 'anchorId' is set
      if (anchorId === undefined || anchorId === null) {
        throw new Error("Missing the required parameter 'anchorId' when calling deleteAnchor");
      }

      let pathParams = {
        'anchorId': anchorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/anchor/{anchorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnchor operation.
     * @callback module:api/AnchorApi~getAnchorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an anchor by its identifier.
     * Use this operation to retrieve an anchor by its identifier.
     * @param {String} anchorId Identifier of the anchor to retrieve.
     * @param {module:api/AnchorApi~getAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchor}
     */
    getAnchor(anchorId, callback) {
      let postBody = null;
      // verify the required parameter 'anchorId' is set
      if (anchorId === undefined || anchorId === null) {
        throw new Error("Missing the required parameter 'anchorId' when calling getAnchor");
      }

      let pathParams = {
        'anchorId': anchorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Anchor;
      return this.apiClient.callApi(
        '/anchor/{anchorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnchorAttestation operation.
     * @callback module:api/AnchorApi~getAnchorAttestationCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the Proof Attestation document of an anchor.
     * Use this operation to retrieve the Proof Attestation document of an anchor.<br> This PDF file is only available once the anchor is CONFIRMED. 
     * @param {String} anchorId Identifier of the anchor.
     * @param {module:api/AnchorApi~getAnchorAttestationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getAnchorAttestation(anchorId, callback) {
      let postBody = null;
      // verify the required parameter 'anchorId' is set
      if (anchorId === undefined || anchorId === null) {
        throw new Error("Missing the required parameter 'anchorId' when calling getAnchorAttestation");
      }

      let pathParams = {
        'anchorId': anchorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/anchor/{anchorId}/attestation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAnchorIds operation.
     * @callback module:api/AnchorApi~searchAnchorIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnchorIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for public anchor identifiers.
     * Use this operation to retrieve the identifiers of all public anchors having a given `hash` and/or `signedHash` property.<br> Only public anchor identifiers are returned.<br> This is a publicly accessible endpoint: authentication is not required to retrieve public anchor identifiers.<br> Paging is supported. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the page to retrieve (from 0). (default to 0)
     * @param {Number} opts.size Number of anchor identifiers per page. (default to 20)
     * @param {String} opts.hash `hash` to search for: all public anchors whose `hash` property is equal are returned. 
     * @param {String} opts.signedHash `signedHash` to search for: all public anchors whose `signedHash` property is equal are returned. 
     * @param {String} opts.userId User identifier to use to filter out results: only public anchors belonging to this user are returned. 
     * @param {module:api/AnchorApi~searchAnchorIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnchorIds}
     */
    searchAnchorIds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'hash': opts['hash'],
        'signedHash': opts['signedHash'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnchorIds;
      return this.apiClient.callApi(
        '/anchorIds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAnchors operation.
     * @callback module:api/AnchorApi~searchAnchorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for anchors.
     * Use this operation to retrieve all anchors having a given `name`, `hash`, `signedHash` and/or `tags` property.<br> Only anchors belonging to the authenticated user are returned.<br> Paging and sorting is supported. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the page to retrieve (from 0). (default to 0)
     * @param {Number} opts.size Number of anchors per page. (default to 20)
     * @param {module:model/String} opts.direction Sorting direction: ASC for ascending DESC for descending.  (default to 'ASC')
     * @param {module:model/String} opts.sort Sorting property: possible values are limited to `created`, `hash` and `signedHash`.  (default to 'created')
     * @param {String} opts.name `name` to search for: all anchors whose `name` property contains this sub-string are returned.<br> **WARNING: Searching by name can timeout on a large anchor set.** 
     * @param {String} opts.hash `hash` to search for: all anchors whose `hash` property is equal are returned. 
     * @param {String} opts.signedHash `signedHash` to search for: all anchors whose `signedHash` property is equal are returned. 
     * @param {Array.<String>} opts.tags Tags to search for: all anchors having all of these tags sets are returned. 
     * @param {module:api/AnchorApi~searchAnchorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchors}
     */
    searchAnchors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'direction': opts['direction'],
        'sort': opts['sort'],
        'name': opts['name'],
        'hash': opts['hash'],
        'signedHash': opts['signedHash'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Anchors;
      return this.apiClient.callApi(
        '/anchors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnchor operation.
     * @callback module:api/AnchorApi~updateAnchorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an anchor.
     * Use this operation to update an anchor.<br> Only the properties `name`, `public`, `tags`, `metadata` and `callbackURL` can be modified. 
     * @param {String} anchorId Identifier of anchor to update.
     * @param {module:model/Anchor} anchor Anchor object to update.
     * @param {module:api/AnchorApi~updateAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchor}
     */
    updateAnchor(anchorId, anchor, callback) {
      let postBody = anchor;
      // verify the required parameter 'anchorId' is set
      if (anchorId === undefined || anchorId === null) {
        throw new Error("Missing the required parameter 'anchorId' when calling updateAnchor");
      }
      // verify the required parameter 'anchor' is set
      if (anchor === undefined || anchor === null) {
        throw new Error("Missing the required parameter 'anchor' when calling updateAnchor");
      }

      let pathParams = {
        'anchorId': anchorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Anchor;
      return this.apiClient.callApi(
        '/anchor/{anchorId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
