/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/v1.5.1/reference)** before reading this documentation. 
 *
 * OpenAPI spec version: 1.5.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Anchor', 'model/AnchorIds', 'model/Anchors'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Anchor'), require('../model/AnchorIds'), require('../model/Anchors'));
  } else {
    // Browser globals (root is window)
    if (!root.WoleetApi) {
      root.WoleetApi = {};
    }
    root.WoleetApi.AnchorApi = factory(root.WoleetApi.ApiClient, root.WoleetApi.Anchor, root.WoleetApi.AnchorIds, root.WoleetApi.Anchors);
  }
}(this, function(ApiClient, Anchor, AnchorIds, Anchors) {
  'use strict';

  /**
   * Anchor service.
   * @module api/AnchorApi
   * @version 1.5.1
   */

  /**
   * Constructs a new AnchorApi. 
   * @alias module:api/AnchorApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAnchor operation.
     * @callback module:api/AnchorApi~createAnchorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new anchor.
     * Use this operation to create a new anchor of one of these two types:&lt;br&gt;  - a data anchor (generating a proof of existence receipt) allows to prove the existence of some data at some point in time.&lt;br&gt; - a signature anchor (generating a proof of signature receipt) allows to prove the existence of the signature of some data at some point in time, the validity of the signature and the signee&#39;s identity.&lt;br&gt;  The properties &#x60;id&#x60;, &#x60;created&#x60;, &#x60;lastModified&#x60;, &#x60;status&#x60;, &#x60;timestamp&#x60; and &#x60;confirmations&#x60; are read-only and so must not be provided: they are managed by the platform and added to the returned anchor.&lt;br&gt; For data anchors, only the properties &#x60;name&#x60; and &#x60;hash&#x60; are required: the &#x60;hash&#x60; property must be the SHA256 hash of the data to anchor, and must be computed caller side. This allows not to leak the original data.&lt;br&gt; For signature anchors, only the properties &#x60;name&#x60;, &#x60;signedHash&#x60;, &#x60;signature&#x60; and &#x60;pubKey&#x60; are required (though the &#x60;identityURL&#x60; property is highly recommended): the &#x60;signedHash&#x60; property must be the SHA256 hash of the data to sign. This allows not to leak the original data and to keep the actual signed data small (signing the digest is equivalent to signing the original data).&lt;br&gt; Be sure to have at least 1 anchoring credit on your account. The &#x60;signature&#x60; property must contains a valid signature of the &#x60;data&#x60; property using the private key paired with the &#x60;pubKey&#x60; public key. 
     * @param {module:model/Anchor} anchor Anchor object to create.
     * @param {module:api/AnchorApi~createAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchor}
     */
    this.createAnchor = function(anchor, callback) {
      var postBody = anchor;

      // verify the required parameter 'anchor' is set
      if (anchor === undefined || anchor === null) {
        throw new Error("Missing the required parameter 'anchor' when calling createAnchor");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Anchor;

      return this.apiClient.callApi(
        '/anchor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnchor operation.
     * @callback module:api/AnchorApi~deleteAnchorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an anchor.
     * Use this operation to delete an anchor.&lt;br&gt; **WARNING: You should never delete an anchor, otherwise you will no longer be able to download its proof receipt.&lt;br&gt; Use this for test purpose only.** 
     * @param {String} anchorid Identifier of the anchor to delete.
     * @param {module:api/AnchorApi~deleteAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAnchor = function(anchorid, callback) {
      var postBody = null;

      // verify the required parameter 'anchorid' is set
      if (anchorid === undefined || anchorid === null) {
        throw new Error("Missing the required parameter 'anchorid' when calling deleteAnchor");
      }


      var pathParams = {
        'anchorid': anchorid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/anchor/{anchorid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnchor operation.
     * @callback module:api/AnchorApi~getAnchorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an anchor by its identifier.
     * Use this operation to retrieve an anchor by its identifier.
     * @param {String} anchorid Identifier of the anchor to retrieve.
     * @param {module:api/AnchorApi~getAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchor}
     */
    this.getAnchor = function(anchorid, callback) {
      var postBody = null;

      // verify the required parameter 'anchorid' is set
      if (anchorid === undefined || anchorid === null) {
        throw new Error("Missing the required parameter 'anchorid' when calling getAnchor");
      }


      var pathParams = {
        'anchorid': anchorid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Anchor;

      return this.apiClient.callApi(
        '/anchor/{anchorid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAnchorIds operation.
     * @callback module:api/AnchorApi~searchAnchorIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnchorIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for public anchors&#39; identifiers.
     * Use this operation to retrieve the identifiers of all public anchors having a given &#x60;hash&#x60; and/or &#x60;signedHash&#x60; property.&lt;br&gt; Only public anchors&#39; identifiers are returned.&lt;br&gt; This is a publicly accessible endpoint: authentication is not required to retrieve public anchors&#39; identifiers.&lt;br&gt; Paging is supported. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the page to retrieve (from 0). (default to 0)
     * @param {Number} opts.size Number of anchors per page. (default to 20)
     * @param {String} opts.hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned. 
     * @param {String} opts.signedHash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned. 
     * @param {module:api/AnchorApi~searchAnchorIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnchorIds}
     */
    this.searchAnchorIds = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'hash': opts['hash'],
        'signedHash': opts['signedHash'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnchorIds;

      return this.apiClient.callApi(
        '/anchorids', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAnchors operation.
     * @callback module:api/AnchorApi~searchAnchorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for anchors.
     * Use this operation to retrieve all anchors having a given &#x60;name&#x60;, &#x60;hash&#x60;, &#x60;signedHash&#x60; and/or &#x60;tags&#x60; property.&lt;br&gt; Only anchors belonging to the authenticated user are returned.&lt;br&gt; Paging and sorting is supported. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the page to retrieve (from 0). (default to 0)
     * @param {Number} opts.size Number of anchors per page. (default to 20)
     * @param {module:model/String} opts.direction Sorting direction: ASC for ascending DESC for descending.  (default to ASC)
     * @param {module:model/String} opts.sort Sorting property: possible values are limited to &#x60;id&#x60;, &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;.  (default to created)
     * @param {String} opts.name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: searching by name can timeout on a large anchor set.** 
     * @param {String} opts.hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned. 
     * @param {String} opts.signedHash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned. 
     * @param {Array.<String>} opts.tags &#x60;tags&#x60; to search for: all anchors having all of these tags sets are returned. 
     * @param {module:api/AnchorApi~searchAnchorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchors}
     */
    this.searchAnchors = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'direction': opts['direction'],
        'sort': opts['sort'],
        'name': opts['name'],
        'hash': opts['hash'],
        'signedHash': opts['signedHash'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Anchors;

      return this.apiClient.callApi(
        '/anchors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnchor operation.
     * @callback module:api/AnchorApi~updateAnchorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anchor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an anchor.
     * Use this operation to update an anchor.&lt;br&gt; Only the properties &#x60;name&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;metadata&#x60; and &#x60;callbackURL&#x60; can be modified. 
     * @param {String} anchorid Identifier of anchor to update.
     * @param {module:model/Anchor} anchor Anchor object to update.
     * @param {module:api/AnchorApi~updateAnchorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anchor}
     */
    this.updateAnchor = function(anchorid, anchor, callback) {
      var postBody = anchor;

      // verify the required parameter 'anchorid' is set
      if (anchorid === undefined || anchorid === null) {
        throw new Error("Missing the required parameter 'anchorid' when calling updateAnchor");
      }

      // verify the required parameter 'anchor' is set
      if (anchor === undefined || anchor === null) {
        throw new Error("Missing the required parameter 'anchor' when calling updateAnchor");
      }


      var pathParams = {
        'anchorid': anchorid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Anchor;

      return this.apiClient.callApi(
        '/anchor/{anchorid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
