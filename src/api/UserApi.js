/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * OpenAPI spec version: 1.6.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CallbackSecret', 'model/Credits', 'model/InlineObject'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CallbackSecret'), require('../model/Credits'), require('../model/InlineObject'));
  } else {
    // Browser globals (root is window)
    if (!root.WoleetApi) {
      root.WoleetApi = {};
    }
    root.WoleetApi.UserApi = factory(root.WoleetApi.ApiClient, root.WoleetApi.CallbackSecret, root.WoleetApi.Credits, root.WoleetApi.InlineObject);
  }
}(this, function(ApiClient, CallbackSecret, Credits, InlineObject) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.6.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCallbackSecret operation.
     * @callback module:api/UserApi~getCallbackSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallbackSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the currently used callback secret (null if not set).
     * Use this operation to get the api callback secret.&lt;br&gt; 
     * @param {module:api/UserApi~getCallbackSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallbackSecret}
     */
    this.getCallbackSecret = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CallbackSecret;

      return this.apiClient.callApi(
        '/user/callbackSecret', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredits operation.
     * @callback module:api/UserApi~getCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user&#39;s anchoriong credits.
     * Use this operation to get the remaining anchoring credits of the authenticated user.&lt;br&gt; 
     * @param {module:api/UserApi~getCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    this.getCredits = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credits;

      return this.apiClient.callApi(
        '/user/credits', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback module:api/UserApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user&#39;s registered JWT tokens.
     * Use this operation to list all JWT tokens registered for the authenticated user. 
     * @param {module:api/UserApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getTokens = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/user/tokens', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTokens operation.
     * @callback module:api/UserApi~putTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user&#39;s registered JWT tokens.
     * Use this operation to update the list of JWT tokens registered for the authenticated user. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject} opts.inlineObject 
     * @param {module:api/UserApi~putTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putTokens = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/tokens', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCallbackSecret operation.
     * @callback module:api/UserApi~updateCallbackSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallbackSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new callback secret.
     * Use this operation to generate the api callback secret.&lt;br&gt; 
     * @param {module:api/UserApi~updateCallbackSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallbackSecret}
     */
    this.updateCallbackSecret = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CallbackSecret;

      return this.apiClient.callApi(
        '/user/callbackSecret', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
