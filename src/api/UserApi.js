/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/v1.5.1/reference)** before reading this documentation. 
 *
 * OpenAPI spec version: 1.5.2
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Credits', 'model/Tokens'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Credits'), require('../model/Tokens'));
  } else {
    // Browser globals (root is window)
    if (!root.WoleetApi) {
      root.WoleetApi = {};
    }
    root.WoleetApi.UserApi = factory(root.WoleetApi.ApiClient, root.WoleetApi.Credits, root.WoleetApi.Tokens);
  }
}(this, function(ApiClient, Credits, Tokens) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.5.2
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCredits operation.
     * @callback module:api/UserApi~getCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user&#39;s anchoriong credits.
     * Use this operation to get the remaining anchoring credits of the authenticated user.&lt;br&gt; 
     * @param {module:api/UserApi~getCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    this.getCredits = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credits;

      return this.apiClient.callApi(
        '/user/credits', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback module:api/UserApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user&#39;s tokens.
     * Use this operation to get a list of tokens of the authenticated user. 
     * @param {module:api/UserApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTokens = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/user/tokens', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTokens operation.
     * @callback module:api/UserApi~putTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user&#39;s tokens.
     * Use this operation to set the list of tokens of the authenticated user. 
     * @param {module:model/Tokens} tokens The list of tokens to set.
     * @param {module:api/UserApi~putTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putTokens = function(tokens, callback) {
      var postBody = tokens;

      // verify the required parameter 'tokens' is set
      if (tokens === undefined || tokens === null) {
        throw new Error("Missing the required parameter 'tokens' when calling putTokens");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BasicAuth', 'JWTAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/tokens', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
