/**
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.11.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CallbackSecret from '../model/CallbackSecret';
import Credits from '../model/Credits';
import Tokens from '../model/Tokens';

/**
* User service.
* @module api/UserApi
* @version 1.11.1
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteKey operation.
     * @callback module:api/UserApi~deleteKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a key and its value from the user's k/v store.
     * @param {String} key The key to delete. 
     * @param {module:api/UserApi~deleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/key/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallbackSecret operation.
     * @callback module:api/UserApi~getCallbackSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallbackSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current callback secret (null if not set).
     * Use this operation to get the API callback secret.
     * @param {module:api/UserApi~getCallbackSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallbackSecret}
     */
    getCallbackSecret(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallbackSecret;
      return this.apiClient.callApi(
        '/user/callbackSecret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredits operation.
     * @callback module:api/UserApi~getCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user's credits.
     * Use this operation to get the remaining signature and anchoring credits of the authenticated user.
     * @param {module:api/UserApi~getCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    getCredits(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credits;
      return this.apiClient.callApi(
        '/user/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKey operation.
     * @callback module:api/UserApi~getKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the value of a key from the user's k/v store.
     * @param {String} key The key to read. 
     * @param {module:api/UserApi~getKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/key/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback module:api/UserApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tokens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user's registered JWT tokens.
     * Use this operation to list all JWT tokens registered for the authenticated user.
     * @param {module:api/UserApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tokens}
     */
    getTokens(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tokens;
      return this.apiClient.callApi(
        '/user/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchKey operation.
     * @callback module:api/UserApi~patchKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch the value of a key in the user's k/v store.
     * Patch the value of a key in the user's k/v store using a JSON merge patch (see https://tools.ietf.org/html/rfc7386 for information about JSON merge patch). 
     * @param {String} key The key to patch. 
     * @param {Object} value The JSON merge patch to apply. 
     * @param {module:api/UserApi~patchKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchKey(key, value, callback) {
      let postBody = value;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling patchKey");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling patchKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/key/{key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postKey operation.
     * @callback module:api/UserApi~postKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new key and store its value in the user's k/v store.
     * @param {String} key The key to create. 
     * @param {Object} value The value to store. 
     * @param {module:api/UserApi~postKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postKey(key, value, callback) {
      let postBody = value;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling postKey");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling postKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/key/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putKey operation.
     * @callback module:api/UserApi~putKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the value of a key in the user's k/v store.
     * @param {String} key The key to update. 
     * @param {Object} value The value to update. 
     * @param {module:api/UserApi~putKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putKey(key, value, callback) {
      let postBody = value;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putKey");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling putKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/key/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTokens operation.
     * @callback module:api/UserApi~putTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user's registered JWT tokens.
     * Use this operation to update the list of JWT tokens registered for the authenticated user.
     * @param {module:model/Tokens} tokens The list of JWT tokens to update.
     * @param {module:api/UserApi~putTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTokens(tokens, callback) {
      let postBody = tokens;
      // verify the required parameter 'tokens' is set
      if (tokens === undefined || tokens === null) {
        throw new Error("Missing the required parameter 'tokens' when calling putTokens");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/tokens', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCallbackSecret operation.
     * @callback module:api/UserApi~updateCallbackSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallbackSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new callback secret.
     * Use this operation to generate the API callback secret.
     * @param {module:api/UserApi~updateCallbackSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallbackSecret}
     */
    updateCallbackSecret(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallbackSecret;
      return this.apiClient.callApi(
        '/user/callbackSecret', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
